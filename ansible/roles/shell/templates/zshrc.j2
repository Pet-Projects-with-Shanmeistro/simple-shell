# Created by newuser for 5.8.1
# -*- mode: zsh -*-

# Zsh Configuration by Shanmeistro, feel free to customize it further to suit your needs!
# This configuration is optimized for Windows Terminal on Windows 10/11 with WSL2.
# It includes settings for history, completion, key bindings, plugins, and more.

# Ensure you have a Nerd Font installed on Windows and configured in Windows Terminal
# e.g., Cascadia Code PL, Fira Code Nerd Font, Hack Nerd Font, Meslo LG M Nerd Font

# ----------------------------------------------------------------------
# Zsh History Configuration
# ----------------------------------------------------------------------
# Keep 10000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# Don't put duplicate lines or lines starting with space in the history.
# Zsh equivalents for Bash's HISTCONTROL=ignoreboth
setopt HIST_IGNORE_DUPS          # Don't record immediately repeated commands
setopt HIST_IGNORE_SPACE         # Don't record lines starting with a space
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicates before unique commands
setopt HIST_FCNTL_LOCK           # Enable history file locking
setopt HIST_VERIFY               # Don't execute immediately upon completion
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks in history
setopt HIST_SAVE_NO_DUPS         # Don't save duplicates in history file
setopt HIST_NO_STORE             # Don't store history commands (like `history`) in the history list

# Append to the history file, don't overwrite it
# Zsh equivalent for Bash's shopt -s histappend
setopt APPEND_HISTORY

# Share history between all running Zsh sessions
setopt SHARE_HISTORY

# ----------------------------------------------------------------------
# Zsh Completion System
# ----------------------------------------------------------------------
# Use modern completion system
autoload -Uz compinit
compinit

# Completion styles
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)" # Ensure dircolors is sourced if you use it for directory listings
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false # Use the new completion system
zstyle ':completion:*' verbose true

# Specific completion for kill command
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# ----------------------------------------------------------------------
# Zsh Options (from .bashrc and Zsh specific)
# ----------------------------------------------------------------------

# Bind key for traditional Emacs-style editing
bindkey -e

# Navigation
bindkey "^[[1;5D" backward-word # Ctrl + Left Arrow: Move back a word
bindkey "^[[1;5C" forward-word  # Ctrl + Right Arrow: Move forward a word

# Deletion
bindkey "^[[3;5~" delete-word   # Ctrl + Del: Delete word forward (from cursor)

# For Ctrl + Shift + Left/Right Arrow: Bind to standard word navigation
# These sequences (e.g., ^[[1;6C) are typical for Ctrl+Shift+Arrow in Windows Terminal.
# They will move the cursor by a word.
bindkey "^[[1;6D" backward-word # Ctrl + Shift + Left Arrow: Move back a word
bindkey "^[[1;6C" forward-word  # Ctrl + Shift + Right Arrow: Move forward a word

# Glob patterns should match dotfiles (e.g., `ls -d .*` behavior for `ls *`)
# This will also make `**` match dotfiles and dot-directories (e.g., `**/*.txt` will match `.git/objects/a.txt`)
setopt GLOB_DOTS

# Enable auto-correction for mistyped commands
# setopt CORRECT_ALL

# ----------------------------------------------------------------------
# Zsh Plugins (for enhanced experience)
# For fast reverse search and syntax highlighting as discussed previously.
# These paths assume you cloned them into ~/.oh-my-zsh/custom/plugins/
# If you cloned them elsewhere, adjust the paths accordingly.
# Example: If cloned to ~/zsh-plugins, then path would be ~/zsh-plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
# It's highly recommended to use a Zsh framework like Antigen or Zplug for easier plugin management.
# But for now, direct sourcing is fine.

# Source zsh-autosuggestions (Crucial for fast reverse search)
# Make sure the path is correct based on where you cloned it.
source ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# Optional: Performance tweaks for zsh-autosuggestions
# ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE="20" # Limit suggestions to recent history for speed
# ZSH_AUTOSUGGEST_USE_ASYNC=1           # Enable asynchronous suggestions if not default

# Source zsh-syntax-highlighting (important: it should be sourced LAST among plugins)
# Make sure the path is correct based on where you cloned it.
source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Start SSH agent if not already running
if [ -z "$SSH_AUTH_SOCK" ]; then
    # Check if a ssh-agent process for the current user is already running
    if pgrep -u "$(whoami)" ssh-agent >/dev/null; then
        # If an agent is running, try to find its socket.
        # This approach can be a bit fragile if multiple agents are running
        # or if socket paths are inconsistent.
        export SSH_AUTH_SOCK=$(find /tmp/ssh-* -user "$(whoami)" -name 'agent.*' 2>/dev/null | head -n 1)
        if [ -z "$SSH_AUTH_SOCK" ]; then
            # If no socket found (agent might be orphaned or not correctly managed),
            # start a new one.
            eval "$(ssh-agent -s)"
        fi
    else
        # No ssh-agent running, start a new one
        eval "$(ssh-agent -s)"
    fi
fi

# Add SSH keys to the agent if they are not already added.
# This part ensures persistence across reboots, as keys will be loaded when you log in.
# It checks if the key is already loaded to avoid re-adding and re-prompting for passphrases.
# The 'ssh-add -l' command lists loaded keys and returns a non-zero exit code if none are loaded.
ssh-add -l > /dev/null 2>&1
if [ $? -ne 0 ]; then # If ssh-add -l fails, it means no keys are loaded
    echo "SSH agent has no keys loaded. Adding your keys..."
    # Add your specific private keys here.
    # For each key with a passphrase, you will be prompted for it upon login
    # into your user session (e.g., after entering your user password at boot).
    # Redirecting stderr to /dev/null to suppress "Identity added:" messages.
    ssh-add ~/.ssh/id_rsa &>/dev/null
    ssh-add ~/.ssh/id_rsa_ado &>/dev/null
    ssh-add ~/.ssh/id_rsa_gitlab &>/dev/null
    echo "Keys added to SSH agent."
else
    echo "SSH agent already has keys loaded."
fi

# ----------------------------------------------------------------------
# Aliases (from your .bashrc and common ones)
# Define your aliases here. Example:
# ----------------------------------------------------------------------

# Common Aliases
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Update system
alias update='sudo apt update && sudo apt upgrade -y'

# Git Aliases (useful for DevOps)
alias ga='git add'
alias gc='git commit -m'
alias gp='git push'
alias gl='git pull'
alias gst='git status'
alias gd='git diff'

# Docker Aliases
alias dcup='docker-compose up -d'
alias dcdown='docker-compose down'
alias dclogs='docker-compose logs -f'
alias dcbash='docker-compose exec' # Usage: dcbash <service_name> bash

# Kubernetes Aliases (if you use kubectl)
alias k='kubectl'
alias kget='kubectl get'
alias kdesc='kubectl describe'
alias klogs='kubectl logs -f'

# Repo Folder Navigation
alias repos='cd ~/repos'
alias personal='cd ~/repos/personal'
alias learning='cd ~/repos/learning'
alias pro='cd ~/repos/professional'

# Your Custom Aliases
# alias mycommand='some_other_command --option'

# ----------------------------------------------------------------------
# Starship Prompt Initialization (MUST BE THE VERY LAST LINE)
# ----------------------------------------------------------------------
eval "$(starship init zsh)"