# Created by Ansible for Nushell with Oh My Posh
# Nushell Configuration by Shanmeistro - Oh My Posh Edition
# This configuration is optimized for Nushell with Oh My Posh prompt

# Ensure you have a Nerd Font installed and configured in your terminal
# Recommended: {{ recommended_fonts | join(', ') }} Nerd Fonts

# ----------------------------------------------------------------------
# Nushell Configuration
# ----------------------------------------------------------------------

# Set default editor
$env.EDITOR = "vim"
$env.VISUAL = "vim"

# Add local bin to PATH if it exists
let local_bin = "{{ local_bin_dir }}"
if ($local_bin | path exists) {
    $env.PATH = ($env.PATH | split row (char esep) | prepend $local_bin | str join (char esep))
}

# ----------------------------------------------------------------------
# Aliases
# ----------------------------------------------------------------------

# Common aliases
alias ll = ls -la
alias la = ls -a
alias l = ls

# System
alias update = sudo apt update && sudo apt upgrade -y

# Git aliases
alias ga = git add
alias gc = git commit -m
alias gp = git push
alias gl = git pull
alias gst = git status
alias gd = git diff
alias gco = git checkout
alias gb = git branch

# Docker aliases
alias dcup = docker-compose up -d
alias dcdown = docker-compose down
alias dclogs = docker-compose logs -f

# Kubernetes aliases
alias k = kubectl
alias kget = kubectl get
alias kdesc = kubectl describe
alias klogs = kubectl logs -f
alias kctx = kubectl config use-context

# Navigation aliases - Nushell style
def repos [] { cd ~/repos }
def personal [] { cd ~/repos/personal }
def learning [] { cd ~/repos/learning }
def pro [] { cd ~/repos/professional }

# ----------------------------------------------------------------------
# Nushell-specific configurations
# ----------------------------------------------------------------------

# Configure completions
$env.config = {
    show_banner: false
    completions: {
        case_sensitive: false
        quick: true
        partial: true
        algorithm: "prefix"
    }
    history: {
        max_size: 10000
        sync_on_enter: true
        file_format: "plaintext"
    }
    table: {
        mode: rounded
        index_mode: always
        trim: {
            methodology: wrapping
            wrapping_try_keep_words: true
        }
    }
    color_config: {
        separator: white
        leading_trailing_space_bg: { attr: n }
        header: green_bold
        empty: blue
        bool: white
        int: white
        filesize: cyan
        duration: white
        date: purple
        range: white
        float: white
        string: white
        nothing: white
        binary: white
        cellpath: white
        row_index: green_bold
        record: white
        list: white
        block: white
        hints: dark_gray
    }
}

# ----------------------------------------------------------------------
# Custom Functions
# ----------------------------------------------------------------------

# SSH agent helper function
def start-ssh-agent [] {
    if not ("SSH_AUTH_SOCK" in $env) {
        let ssh_agent_output = (ssh-agent -c | lines)
        for line in $ssh_agent_output {
            if ($line | str contains "setenv") {
                let parts = ($line | str replace "setenv " "" | str replace ";" "" | split column " " key value)
                $env.($parts.key.0) = $parts.value.0
            }
        }
    }
    
    # Add SSH keys if none are loaded
    let ssh_keys = (ssh-add -l | complete)
    if $ssh_keys.exit_code != 0 {
        if ("~/.ssh/id_rsa" | path exists) { ssh-add ~/.ssh/id_rsa }
        if ("~/.ssh/id_rsa_ado" | path exists) { ssh-add ~/.ssh/id_rsa_ado }
        if ("~/.ssh/id_rsa_gitlab" | path exists) { ssh-add ~/.ssh/id_rsa_gitlab }
        if ("~/.ssh/id_ed25519" | path exists) { ssh-add ~/.ssh/id_ed25519 }
    }
}

# Call SSH agent setup
start-ssh-agent

# ----------------------------------------------------------------------
# Oh My Posh Prompt Integration
# ----------------------------------------------------------------------

# Set up Oh My Posh prompt
$env.PROMPT_INDICATOR = ""
$env.PROMPT_INDICATOR_VI_INSERT = ": "
$env.PROMPT_INDICATOR_VI_NORMAL = "ã€‰"
$env.PROMPT_MULTILINE_INDICATOR = "::: "

# Use Oh My Posh for prompt
$env.PROMPT_COMMAND = { || 
    oh-my-posh prompt --shell nu --config {{ user_home }}/.poshthemes/{{ oh_my_posh_theme | default('jandedobbeleer.omp.json') }} --execution-time $env.CMD_DURATION_MS --error $env.LAST_EXIT_CODE
}

# Set the right prompt
$env.PROMPT_COMMAND_RIGHT = { || 
    oh-my-posh prompt --shell nu --config {{ user_home }}/.poshthemes/{{ oh_my_posh_theme | default('jandedobbeleer.omp.json') }} --right
}