---
# ============================================================================
# Backup existing configurations before making changes
# ============================================================================
- name: Check if existing .zshrc exists
  ansible.builtin.stat:
    path: "{{ user_home }}/.zshrc"
  register: shell_existing_zshrc
  become: false

- name: Check if existing .bashrc exists
  ansible.builtin.stat:
    path: "{{ user_home }}/.bashrc"
  register: shell_existing_bashrc
  become: false

- name: Check if existing Oh My Zsh installation exists
  ansible.builtin.stat:
    path: "{{ omz_path }}"
  register: shell_omz_path_stat
  become: false

- name: Check if existing Powerlevel10k installation exists
  ansible.builtin.stat:
    path: "{{ p10k_theme_path_omz }}"
  register: shell_p10k_path_stat
  become: false

- name: Check if existing Starship binary exists
  ansible.builtin.stat:
    path: "{{ local_bin_dir }}/starship"
  register: shell_starship_binary_stat
  become: false

- name: Create backup directory
  ansible.builtin.file:
    path: "{{ backup_dir }}"
    state: directory
    mode: '0755'
  become: false
  when: backup_existing_configs and (shell_existing_zshrc.stat.exists or shell_existing_bashrc.stat.exists)

- name: Backup existing .zshrc
  ansible.builtin.copy:
    src: "{{ user_home }}/.zshrc"
    dest: "{{ backup_dir }}/.zshrc.backup"
    remote_src: true
    mode: '0644'
  become: false
  when: backup_existing_configs and shell_existing_zshrc.stat.exists

- name: Backup existing .bashrc
  ansible.builtin.copy:
    src: "{{ user_home }}/.bashrc"
    dest: "{{ backup_dir }}/.bashrc.backup"
    remote_src: true
    mode: '0644'
  become: false
  when: backup_existing_configs and shell_existing_bashrc.stat.exists

- name: Backup existing .p10k.zsh
  ansible.builtin.copy:
    src: "{{ user_home }}/.p10k.zsh"
    dest: "{{ backup_dir }}/.p10k.zsh.backup"
    remote_src: true
    mode: '0644'
  become: false
  when: backup_existing_configs and prompt_framework == "p10k"
  ignore_errors: true

- name: Display backup location
  ansible.builtin.debug:
    msg: "Existing configurations backed up to: {{ backup_dir }}"
  when: backup_existing_configs and (shell_existing_zshrc.stat.exists or shell_existing_bashrc.stat.exists)

# ============================================================================
# Install Zsh if preferred
# ============================================================================
- name: Install Zsh if preferred and not already installed
  become: true
  ansible.builtin.package:
    name: zsh
    state: present
  when: preferred_shell == "/usr/bin/zsh"

# ============================================================================
# Starship Installation
# ============================================================================
- name: Download Starship install script
  become: true
  ansible.builtin.get_url:
    url: https://starship.rs/install.sh
    dest: /tmp/install_starship.sh
    mode: '0755'
  when: prompt_framework == "starship"

- name: Install Starship prompt
  become: true
  ansible.builtin.command: sh /tmp/install_starship.sh -y
  args:
    creates: "{{ local_bin_dir }}/starship"
  when: prompt_framework == "starship" and not shell_starship_binary_stat.stat.exists

- name: Ensure Starship configuration directory exists
  ansible.builtin.file:
    path: "{{ config_dir }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0755'
  become: false
  when: prompt_framework == "starship"

- name: Check if Starship configuration file exists
  ansible.builtin.stat:
    path: "{{ starship_config_path }}"
  register: shell_starship_config_stat
  when: prompt_framework == "starship"

- name: Copy Starship configuration template
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../starship_templates/{{ starship_template }}.toml"
    dest: "{{ starship_config_path }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0644'
  become: false
  when: prompt_framework == "starship" and not shell_starship_config_stat.stat.exists

# ============================================================================
# Zsh Plugins Installation (for Starship - standalone)
# ============================================================================
- name: Create Zsh plugins directory (for Starship setup)
  ansible.builtin.file:
    path: "{{ zsh_plugins_dir }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0755'
  become: false
  when: prompt_framework == "starship" and preferred_shell == "/usr/bin/zsh"

- name: Clone zsh-autosuggestions (standalone)
  ansible.builtin.git:
    repo: "{{ zsh_autosuggestions_repo }}"
    dest: "{{ zsh_plugins_dir }}/zsh-autosuggestions"
    version: master
    update: no
  become: false
  when: prompt_framework == "starship" and preferred_shell == "/usr/bin/zsh"

- name: Clone zsh-syntax-highlighting (standalone)
  ansible.builtin.git:
    repo: "{{ zsh_syntax_highlighting_repo }}"
    dest: "{{ zsh_plugins_dir }}/zsh-syntax-highlighting"
    version: master
    update: no
  become: false
  when: prompt_framework == "starship" and preferred_shell == "/usr/bin/zsh"

# ============================================================================
# Oh My Zsh Installation (for Powerlevel10k)
# ============================================================================
- name: Install Oh My Zsh (for Powerlevel10k)
  ansible.builtin.git:
    repo: 'https://github.com/ohmyzsh/ohmyzsh.git'
    dest: "{{ omz_path }}"
    version: master
    update: no
  become: false
  when: prompt_framework == "p10k" and not shell_omz_path_stat.stat.exists

- name: Install zsh-autosuggestions plugin (Oh My Zsh)
  ansible.builtin.git:
    repo: 'https://github.com/zsh-users/zsh-autosuggestions'
    dest: "{{ omz_plugins_path }}/zsh-autosuggestions"
    version: master
    update: no
  become: false
  when: prompt_framework == "p10k" and shell_omz_path_stat.stat.exists

- name: Install zsh-syntax-highlighting plugin (Oh My Zsh)
  ansible.builtin.git:
    repo: 'https://github.com/zsh-users/zsh-syntax-highlighting.git'
    dest: "{{ omz_plugins_path }}/zsh-syntax-highlighting"
    version: master
    update: no
  become: false
  when: prompt_framework == "p10k" and shell_omz_path_stat.stat.exists

# ============================================================================
# Powerlevel10k Installation
# ============================================================================
- name: Install Powerlevel10k theme (via Oh My Zsh)
  ansible.builtin.git:
    repo: 'https://github.com/romkatv/powerlevel10k.git'
    dest: "{{ p10k_theme_path_omz }}"
    version: master
    update: no
  become: false
  when: prompt_framework == "p10k" and not shell_p10k_path_stat.stat.exists and shell_omz_path_stat.stat.exists

- name: Copy Powerlevel10k configuration template
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../p10k_templates/{{ p10k_template }}.zsh"
    dest: "{{ p10k_config_path }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0644'
  become: false
  when: prompt_framework == "p10k" and not shell_p10k_path_stat.stat.exists

# ============================================================================
# Deploy .zshrc based on prompt framework
# ============================================================================
- name: Deploy .zshrc for Powerlevel10k
  ansible.builtin.template:
    src: zshrc-p10k.j2
    dest: "{{ user_home }}/.zshrc"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0644'
    backup: yes
  become: false
  when: preferred_shell == "/usr/bin/zsh" and prompt_framework == "p10k"

- name: Deploy .zshrc for Starship
  ansible.builtin.template:
    src: zshrc-starship.j2
    dest: "{{ user_home }}/.zshrc"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0644'
    backup: yes
  become: false
  when: preferred_shell == "/usr/bin/zsh" and prompt_framework == "starship"

# ============================================================================
# Set preferred shell
# ============================================================================
- name: Set preferred shell for user
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    shell: "{{ preferred_shell }}"
  when: preferred_shell is defined
