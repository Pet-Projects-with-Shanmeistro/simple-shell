---
# ============================================================================
# Shell Environment Setup - Multi-shell and Multi-framework Support
# ============================================================================

- name: Debug - Shell role started
  ansible.builtin.debug:
    msg: |
      Shell role tasks are executing:
      - Shell: {{ preferred_shell }}
      - Framework: {{ prompt_framework }}
      - Setup Mode: {{ setup_mode | default('new') }}
      - Theme Template: {{ starship_template | default('none') if prompt_framework == 'starship' else p10k_template | default('none') }}

# ============================================================================
# Check Existing Configurations
# ============================================================================
- name: Check existing shell configurations
  ansible.builtin.stat:
    path: "{{ item }}"
  register: shell_existing_configs
  loop:
    - "{{ user_home }}/.zshrc"
    - "{{ user_home }}/.bashrc"
    - "{{ user_home }}/.config/fish/config.fish"
    - "{{ user_home }}/.config/nushell/config.nu"
    - "{{ user_home }}/.p10k.zsh"
    - "{{ config_dir }}/starship.toml"
    - "{{ omz_path }}"
    - "{{ user_home }}/.oh-my-posh"
  become: false

- name: Set facts for existing configurations
  ansible.builtin.set_fact:
    shell_existing_zshrc: "{{ shell_existing_configs.results[0] }}"
    shell_existing_bashrc: "{{ shell_existing_configs.results[1] }}"
    shell_existing_fish_config: "{{ shell_existing_configs.results[2] }}"
    shell_existing_nu_config: "{{ shell_existing_configs.results[3] }}"
    shell_existing_p10k: "{{ shell_existing_configs.results[4] }}"
    shell_existing_starship: "{{ shell_existing_configs.results[5] }}"
    shell_existing_omz: "{{ shell_existing_configs.results[6] }}"
    shell_existing_omp: "{{ shell_existing_configs.results[7] }}"

# ============================================================================
# Backup Existing Configurations
# ============================================================================
- name: Create backup directory
  ansible.builtin.file:
    path: "{{ backup_dir }}"
    state: directory
    mode: '0755'
  become: false
  when:
    - backup_existing_configs | default(true)
    - setup_mode in ['update', 'clean']

- name: Backup existing configurations
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ backup_dir }}/{{ item.dest }}"
    remote_src: true
    mode: '0644'
  become: false
  loop:
    - { src: "{{ user_home }}/.zshrc", dest: ".zshrc.backup" }
    - { src: "{{ user_home }}/.bashrc", dest: ".bashrc.backup" }
    - { src: "{{ user_home }}/.config/fish/config.fish", dest: "fish_config.fish.backup" }
    - { src: "{{ user_home }}/.config/nushell/config.nu", dest: "nushell_config.nu.backup" }
    - { src: "{{ user_home }}/.p10k.zsh", dest: ".p10k.zsh.backup" }
    - { src: "{{ config_dir }}/starship.toml", dest: "starship.toml.backup" }
  when:
    - backup_existing_configs | default(true)
    - setup_mode in ['update', 'clean']
    - shell_existing_configs.results[loop.index0].stat.exists
  failed_when: false

- name: Display backup location
  ansible.builtin.debug:
    msg: "Existing configurations backed up to: {{ backup_dir }}"
  when:
    - backup_existing_configs | default(true)
    - setup_mode in ['update', 'clean']

# ============================================================================
# Install Required Shells
# ============================================================================
- name: Install Zsh
  ansible.builtin.package:
    name: zsh
    state: present
  become: true
  when:
    - preferred_shell == "/usr/bin/zsh"
    - install_zsh | default(false)

- name: Install Fish
  ansible.builtin.package:
    name: fish
    state: present
  become: true
  when:
    - preferred_shell == "/usr/bin/fish"
    - install_fish | default(false)

- name: Install Nushell (Ubuntu/Debian)
  when:
    - preferred_shell == "/usr/local/bin/nu"
    - install_nushell | default(false)
    - ansible_os_family == "Debian"
  block:
    - name: Download Nushell release info
      ansible.builtin.uri:
        url: https://api.github.com/repos/nushell/nushell/releases/latest
        return_content: true
      register: shell_nushell_release

    - name: Download Nushell binary
      ansible.builtin.get_url:
        url: >-
          {{ shell_nushell_release.json.assets |
             selectattr('name', 'match', '.*x86_64-unknown-linux-gnu.tar.gz') |
             map(attribute='browser_download_url') |
             first }}
        dest: "/tmp/nushell.tar.gz"
        mode: '0644'

    - name: Extract Nushell
      ansible.builtin.unarchive:
        src: "/tmp/nushell.tar.gz"
        dest: "/tmp"
        remote_src: true

    - name: Install Nushell binary
      ansible.builtin.copy:
        src: "/tmp/nu-{{ shell_nushell_release.json.tag_name }}-x86_64-unknown-linux-gnu/nu"
        dest: "/usr/local/bin/nu"
        mode: '0755'
        owner: root
        group: root
        remote_src: true
      become: true

    - name: Clean up Nushell installation files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/nushell.tar.gz"
        - "/tmp/nu-{{ shell_nushell_release.json.tag_name }}-x86_64-unknown-linux-gnu"

- name: Install Nushell (macOS)
  community.general.homebrew:
    name: nushell
    state: present
  when:
    - preferred_shell == "/usr/local/bin/nu"
    - install_nushell | default(false)
    - ansible_os_family == "Darwin"

# ============================================================================
# Framework-Specific Installations
# ============================================================================

# Starship Installation
- name: Install Starship
  when: prompt_framework == "starship"
  block:
    - name: Download Starship install script
      ansible.builtin.get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/install_starship.sh
        mode: '0755'
      become: true

    - name: Install Starship prompt
      ansible.builtin.command: sh /tmp/install_starship.sh -y
      args:
        creates: /usr/local/bin/starship
      become: true

    - name: Ensure Starship configuration directory exists
      ansible.builtin.file:
        path: "{{ config_dir }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0755'
      become: false

    - name: Copy Starship configuration template
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../starship_templates/{{ starship_template }}.toml"
        dest: "{{ starship_config_path }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'
      become: false
      when: starship_template is defined and starship_template != ""

# Oh My Zsh + Powerlevel10k Installation
- name: Install Oh My Zsh and Powerlevel10k
  when: prompt_framework == "p10k"
  block:
    - name: Install Oh My Zsh
      ansible.builtin.git:
        repo: 'https://github.com/ohmyzsh/ohmyzsh.git'
        dest: "{{ omz_path }}"
        version: master
        update: false
      become: false
      when: not shell_existing_omz.stat.exists

    - name: Install Powerlevel10k theme
      ansible.builtin.git:
        repo: 'https://github.com/romkatv/powerlevel10k.git'
        dest: "{{ omz_path }}/custom/themes/powerlevel10k"
        version: master
        update: false
      become: false

    - name: Install Oh My Zsh plugins
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ omz_path }}/custom/plugins/{{ item.name }}"
        version: master
        update: false
      become: false
      loop:
        - { repo: 'https://github.com/zsh-users/zsh-autosuggestions', name: 'zsh-autosuggestions' }
        - { repo: 'https://github.com/zsh-users/zsh-syntax-highlighting.git', name: 'zsh-syntax-highlighting' }

    - name: Copy Powerlevel10k configuration template
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../p10k_templates/{{ p10k_template }}.zsh"
        dest: "{{ p10k_config_path }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'
      become: false
      when: p10k_template is defined and p10k_template != ""

# Oh My Posh Installation
- name: Install Oh My Posh
  when: prompt_framework == "oh-my-posh"
  block:
    - name: Download Oh My Posh (Linux)
      ansible.builtin.get_url:
        url: https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64
        dest: /usr/local/bin/oh-my-posh
        mode: '0755'
      become: true
      when: ansible_os_family == "Debian"

    - name: Install Oh My Posh (macOS)
      community.general.homebrew:
        name: jandedobbeleer/oh-my-posh/oh-my-posh
        state: present
      when: ansible_os_family == "Darwin"

    - name: Create Oh My Posh themes directory
      ansible.builtin.file:
        path: "{{ user_home }}/.poshthemes"
        state: directory
        mode: '0755'
      become: false

    - name: Download Oh My Posh themes
      ansible.builtin.unarchive:
        src: https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip
        dest: "{{ user_home }}/.poshthemes"
        remote_src: true
        mode: '0644'
      become: false

# Spaceship Installation (Zsh only)
- name: Install Spaceship prompt
  when: prompt_framework == "spaceship" and preferred_shell == "/usr/bin/zsh"
  block:
    - name: Clone Spaceship prompt
      ansible.builtin.git:
        repo: 'https://github.com/spaceship-prompt/spaceship-prompt.git'
        dest: "{{ user_home }}/.spaceship-prompt"
        version: master
        depth: 1
        update: false
      become: false

    - name: Create spaceship symlink
      ansible.builtin.file:
        src: "{{ user_home }}/.spaceship-prompt/spaceship.zsh-theme"
        dest: "{{ user_home }}/.spaceship.zsh-theme"
        state: link
      become: false

# Zim Installation (Zsh only)
- name: Install Zim framework
  when: prompt_framework == "zim" and preferred_shell == "/usr/bin/zsh"
  block:
    - name: Download Zim installation script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/zimfw/install/master/install.zsh
        dest: /tmp/install_zim.zsh
        mode: '0755'

    - name: Install Zim framework
      ansible.builtin.command: zsh /tmp/install_zim.zsh
      become: false
      args:
        creates: "{{ user_home }}/.zim"

# Prezto Installation (Zsh only)
- name: Install Prezto framework
  when: prompt_framework == "prezto" and preferred_shell == "/usr/bin/zsh"
  block:
    - name: Clone Prezto repository
      ansible.builtin.git:
        repo: 'https://github.com/sorin-ionescu/prezto.git'
        dest: "{{ user_home }}/.zprezto"
        version: master
        update: false
        recursive: true
      become: false

    - name: Create Prezto configuration links
      ansible.builtin.file:
        src: "{{ user_home }}/.zprezto/runcoms/{{ item }}"
        dest: "{{ user_home }}/.{{ item }}"
        state: link
        force: true
      become: false
      loop:
        - zlogin
        - zlogout
        - zpreztorc
        - zprofile
        - zshenv
      when: setup_mode == "clean" or not shell_existing_zshrc.stat.exists

# ============================================================================
# Standalone Zsh Plugins (for non-framework setups)
# ============================================================================
- name: Install standalone Zsh plugins
  when:
    - preferred_shell == "/usr/bin/zsh"
    - prompt_framework in ["starship", "spaceship"] # Frameworks that don't manage plugins
  block:
    - name: Create Zsh plugins directory
      ansible.builtin.file:
        path: "{{ zsh_plugins_dir }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0755'
      become: false

    - name: Clone standalone Zsh plugins
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ zsh_plugins_dir }}/{{ item.name }}"
        version: master
        update: false
      become: false
      loop:
        - { repo: "{{ zsh_autosuggestions_repo }}", name: "zsh-autosuggestions" }
        - { repo: "{{ zsh_syntax_highlighting_repo }}", name: "zsh-syntax-highlighting" }

# ============================================================================
# Deploy Shell Configuration Files
# ============================================================================

# Zsh configurations
- name: Deploy Zsh configuration
  ansible.builtin.template:
    src: "{{ item.template }}"
    dest: "{{ user_home }}/.zshrc"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0644'
    backup: true
  become: false
  loop:
    - { framework: "p10k", template: "zshrc-p10k.j2" }
    - { framework: "starship", template: "zshrc-starship.j2" }
    - { framework: "oh-my-posh", template: "zshrc-omp.j2" }
    - { framework: "spaceship", template: "zshrc-spaceship.j2" }
  when:
    - preferred_shell == "/usr/bin/zsh"
    - prompt_framework == item.framework

# Bash configurations
- name: Deploy Bash configuration for Starship
  ansible.builtin.template:
    src: bashrc-starship.j2
    dest: "{{ user_home }}/.bashrc"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0644'
    backup: true
  become: false
  when:
    - preferred_shell == "/bin/bash"
    - prompt_framework == "starship"

# Fish configurations
- name: Configure Fish shell
  when: preferred_shell == "/usr/bin/fish"
  block:
    - name: Create Fish configuration directory
      ansible.builtin.file:
        path: "{{ user_home }}/.config/fish"
        state: directory
        mode: '0755'
      become: false

    - name: Deploy Fish configuration
      ansible.builtin.template:
        src: "fish-{{ prompt_framework }}.fish.j2"
        dest: "{{ user_home }}/.config/fish/config.fish"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'
        backup: true
      become: false

# Nushell configurations
- name: Configure Nushell
  when: preferred_shell == "/usr/local/bin/nu"
  block:
    - name: Create Nushell configuration directory
      ansible.builtin.file:
        path: "{{ user_home }}/.config/nushell"
        state: directory
        mode: '0755'
      become: false

    - name: Deploy Nushell configuration
      ansible.builtin.template:
        src: "nushell-{{ prompt_framework }}.nu.j2"
        dest: "{{ user_home }}/.config/nushell/config.nu"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'
        backup: true
      become: false

# ============================================================================
# Set Default Shell
# ============================================================================
- name: Set preferred shell as default
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    shell: "{{ preferred_shell }}"
  become: true
  when:
    - preferred_shell is defined
    - setup_mode in ['clean', 'new']

# ============================================================================
# Post-Installation Tasks
# ============================================================================
- name: Display framework-specific next steps
  ansible.builtin.debug:
    msg: |
      {{ prompt_framework | title }} has been installed for {{ preferred_shell | basename }}.

      Next steps:
      {% if prompt_framework == 'p10k' and (p10k_template is not defined or p10k_template == '') %}
      - Run 'p10k configure' to set up your prompt interactively
      {% endif %}
      {% if prompt_framework == 'starship' %}
      - Your Starship config is at: {{ starship_config_path }}
      - Edit it to customize your prompt further
      {% endif %}
      {% if prompt_framework == 'oh-my-posh' %}
      - Available themes are in: {{ user_home }}/.poshthemes
      - Configure via your shell's RC file
      {% endif %}
      {% if prompt_framework in ['zim', 'prezto'] %}
      - Framework installed. Restart your shell to see changes.
      - Check the framework documentation for customization options.
      {% endif %}
